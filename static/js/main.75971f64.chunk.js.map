{"version":3,"sources":["BankDetails/BankHome.module.scss","icons/left.svg","icons/right.svg","logo.svg","BankDetails/Store/actionTypes.js","BankDetails/Store/action.js","BankDetails/BankHome.js","BankDetails/innerBankDetails.js","App.js","serviceWorker.js","BankDetails/Store/reducer.js","index.js"],"names":["module","exports","INIT_STATE","getBankData","dispatch","type","URL","axios","get","then","response","status","console","log","data","localStorage","setItem","JSON","stringify","BankData","catch","error","errMsg","errorMessage","getBanKdataFromCache","parse","getItem","BankHome","props","state","displayBank","rowsPerPage","pageNum","totalPage","searchEnable","searchArray","totalSearchPage","filter","searchString","timeout","display","_","cloneDeep","bankData","tempPageNum","lengthOfBank","length","slice","setState","displaySearch","totalLength","NumberofRowsPerPageChange","totalSearchLength","parseInt","handlePrevDisableCheck","InputIdentifier","disableProp","pageChange","checkContains","obj","searchStringLength","val","toString","isEqual","searchBankOnQuery","thisRef","document","getElementById","addEventListener","e","clearTimeout","setTimeout","searchArrayOriginal","changeSearch","event","target","value","changeFilter","favourite","myRef","React","createRef","this","prevProps","prevState","id","onChange","placeholder","className","cx","styles","main","scroll","map","resource","index","url","ifsc","to","clientCardAlign","key","ResourceCard","style","cardTextMedium","bank_name","branch","bank_id","address","ArrowDisable","Arrow","disabled","onClick","src","leftArrow","alt","rightArrow","Component","connect","actions","ifscParams","currData","fav","match","params","bankID","name","for","App","path","exact","component","BankDetails","innerBankDetails","Boolean","window","location","hostname","initialState","getDataState","cacheState","initState","resetError","action","getDataLoading","getDataSuccess","getDataError","getCacheData","reducer","actionTypes","store","createStore","applyMiddleware","thunk","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75971f64.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"clientCardAlign\":\"BankHome_clientCardAlign__2mCdX\",\"ResourceCard\":\"BankHome_ResourceCard__1KVHk\",\"cardTextSmall\":\"BankHome_cardTextSmall__JlFIZ\",\"cardTextMedium\":\"BankHome_cardTextMedium__2Wl5Z\",\"ModalPage\":\"BankHome_ModalPage__9JsLG\",\"ModalForm\":\"BankHome_ModalForm__RpMvp\",\"add\":\"BankHome_add__2LAGT\",\"alignButton\":\"BankHome_alignButton__1jjM0\",\"ArrowDisable\":\"BankHome_ArrowDisable__2LO4F\"};","module.exports = __webpack_public_path__ + \"static/media/left.f697887c.svg\";","module.exports = __webpack_public_path__ + \"static/media/right.01769d75.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.8dad8028.svg\";","export const INIT_STATE = 'INIT_BANK_DETAILS_STATE';\nexport const RESET_ERROR = 'RESET_BANK_DETAILS_ERROR';\n\nexport const GET_BANK_DETAILS_LOADING = 'GET_BANK_DETAILS_DATA_LOADING';\nexport const GET_BANK_DETAILS_SUCCESS = 'GET_BANK_DETAILS_DATA_SUCCESS';\nexport const GET_BANK_DETAILS_ERROR = 'GET_BANK_DETAILS_DATA_ERROR';\n\nexport const CACHE_SUCCESS = 'CACHE_SUCCESS' ;","import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\n//Init State Action Dispatch\nexport const initState = () => {\n    return dispatch => {\n        dispatch({\n            type: actionTypes.INIT_STATE\n        })\n    };\n};\n\n//Get Data Action Dispatch\nexport const getBankData = () => {\n    return (dispatch) => {\n        dispatch({\n            type: actionTypes.GET_BANK_DETAILS_LOADING\n        })\n\n        URL = \"https://vast-shore-74260.herokuapp.com/banks?city=MUMBAI\"\n        axios.get(URL)\n            .then(response => {\n                if (response.status === 200 || response.status === 201) {\n                    console.log(\"SUCCEs\", response.data)\n\n                    localStorage.setItem(\"cacheBankData\", JSON.stringify(response.data));\n                    dispatch({\n                        type: actionTypes.GET_BANK_DETAILS_SUCCESS,\n                        BankData: response.data\n                    });\n                }\n            })\n            .catch(error => {\n                let errMsg = error;\n                if (error.response.data && error.response.data.errorMessage) {\n                    errMsg = error.response.data.errorMessage;\n                }\n                dispatch({\n                    type: actionTypes.GET_BANK_DETAILS_ERROR,\n                    error: errMsg\n                });\n            });\n    };\n};\n\n//\nexport const getBanKdataFromCache = () => {\n    let data = JSON.parse(localStorage.getItem('cacheBankData'));\n        \n    return(dispatch) =>\n    {\n        dispatch({\n            type:actionTypes.CACHE_SUCCESS,\n            BankData: data\n        })\n    }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport * as actions from './Store/action';\nimport * as actionTypes from './Store/actionTypes';\nimport cx from 'classnames';\nimport styles from \"./BankHome.module.scss\";\nimport { NavLink, Link } from \"react-router-dom\";\nimport leftArrow from './../icons/left.svg';\nimport rightArrow from './../icons/right.svg';\nclass BankHome extends Component {\n\n\n    state = {\n        displayBank: [],\n        rowsPerPage: 10,\n        pageNum: 1,\n        totalPage: 1,\n        searchEnable: false,\n        searchArray: [],\n        totalSearchPage: 1,\n        filter: \"ifsc\",\n        searchString:\"\"\n    }\n    timeout = null;\n\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n    }\n\n    componentDidMount() {\n        // Get data\n        let data = JSON.parse(localStorage.getItem('cacheBankData'));\n\n        if (!data)\n            this.props.getBankData();\n        else\n            this.props.getBanKdataFromCache();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (!(_.isEqual(prevProps.bankData, this.props.bankData)) && !this.state.searchEnable) {\n\n            this.display();\n            this.NumberofRowsPerPageChange();\n\n        }\n        if (this.state.rowsPerPage !== prevState.rowsPerPage) {\n            this.NumberofRowsPerPageChange();\n            if (!this.state.searchEnable)\n                this.display();\n        }\n        if (this.state.pageNum !== prevState.pageNum) {\n            this.display();\n        }\n        if (prevState.searchArray !== this.state.searchArray && this.state.searchArray.length != 0) {\n            this.NumberofRowsPerPageChange();\n        }\n        if (prevState.searchEnable !== this.state.searchEnable) {\n            this.display();\n        }\n        if (!(_.isEqual(this.state.filter, prevState.filter))) {\n            \n            this.display() ;\n        }\n\n    }\n\n\n    componentWillMount() {\n\n    }\n\n    display = () => {\n        let displayBank;\n\n        if (this.state.searchEnable)\n            displayBank = _.cloneDeep(this.state.searchArray);\n        else\n            displayBank = _.cloneDeep(this.props.bankData);\n\n        let tempPageNum = (this.state.pageNum - 1) * this.state.rowsPerPage;\n\n        let lengthOfBank = displayBank.length;\n\n        displayBank = displayBank.slice(tempPageNum, (tempPageNum + this.state.rowsPerPage - 1) < lengthOfBank ?\n            tempPageNum + (this.state.rowsPerPage % lengthOfBank) : tempPageNum + (this.state.rowsPerPage));\n\n\n\n        \n        this.setState({ displayBank: displayBank })\n\n    }\n\n    displaySearch = () => {\n        let totalLength = this.state.searchArray.length;\n        let displayBank = [];\n\n        let tempPageNum = (this.state.pageNum - 1) * this.state.rowsPerPage;\n\n        displayBank = displayBank.slice(tempPageNum, (tempPageNum + this.state.rowsPerPage - 1) < totalLength ?\n            tempPageNum + (this.state.rowsPerPage % totalLength) : tempPageNum + (this.state.rowsPerPage));\n\n\n\n        this.setState({ displayBank: displayBank });\n\n    }\n    NumberofRowsPerPageChange = () => {\n        let totalLength = this.props.bankData.length;\n        let totalSearchLength = this.state.searchArray.length;\n        let rowsPerPage = this.state.rowsPerPage;\n        let totalSearchPage = 1;\n        if (this.state.searchEnable) {\n\n            totalSearchPage = parseInt(totalSearchLength / rowsPerPage);\n            if (rowsPerPage % totalSearchLength != 0) {\n                totalSearchPage += 1;\n            }\n            \n        }\n        let totalPage = parseInt(totalLength / rowsPerPage);\n        if (rowsPerPage % totalLength != 0) {\n            totalPage += 1;\n        }\n\n        this.setState({ totalPage: totalPage, totalSearchPage: totalSearchPage });\n\n\n    }\n    handlePrevDisableCheck = (InputIdentifier) => {\n        let disableProp = false;\n\n\n        if (InputIdentifier === \"left\" && this.state.pageNum === 1)\n            disableProp = true;\n        else if (!this.state.searchEnable && InputIdentifier === \"right\" && this.state.pageNum === this.state.totalPage)\n            disableProp = true;\n        else if (this.state.searchEnable && InputIdentifier === \"right\" && this.state.pageNum === this.state.totalSearchPage)\n            disableProp = true;\n\n        \n        return disableProp;\n    }\n    pageChange = (InputIdentifier) => {\n\n        let pageNum = this.state.pageNum;\n        if (InputIdentifier === \"right\") {\n            pageNum += 1;\n        }\n        else if (InputIdentifier === \"left\") {\n            pageNum -= 1;\n        }\n        this.setState({ pageNum: pageNum });\n    }\n    checkContains = (obj, searchString, searchStringLength) => {\n\n        if(this.state.filter === \"favourite\")\n        {\n            if('favourite' in obj )\n            {\n                let val = obj[this.state.filter];\n                \n                val = val.toString();\n                searchString = searchString.toString();\n                val = val.slice(0, searchStringLength);\n                if (_.isEqual(val, searchString))\n                    return true;\n                return false;\n            }\n        }\n        else{\n            let val = obj[this.state.filter];\n        \n        val = val.toString();\n        searchString = searchString.toString();\n        val = val.slice(0, searchStringLength);\n        if (_.isEqual(val, searchString))\n            return true;\n        return false;\n        }\n        \n    }\n    searchBankOnQuery = (searchString,searchStringLength) => {\n        \n        if(searchStringLength !== 0)\n        {\n            let thisRef = this ;\n            let input = document.getElementById('searchBank');\n                input.addEventListener('keyup', function (e) {\n                    // Clear the timeout if it has already been set.\n                    // This will prevent the previous task from executing\n                    // if it has been less than <MILLISECONDS>\n                    clearTimeout(thisRef.timeout);\n    \n                    // Make a new timeout set to go off in 1000ms (1 second)\n                    thisRef.timeout = setTimeout(function () {\n                        let searchArray = [];\n                        let i = 0;\n                        \n                        let bankArray = _.cloneDeep(thisRef.props.bankData);\n                        // searchArray = bankArray.filter(obj => \n                        //     Object.values(obj).findIndex(val => this.checkContains(val, searchString, searchStringLength,obj)) > -1\n                        // )\n                        searchArray = bankArray.filter(obj =>\n                            thisRef.checkContains(obj, searchString, searchStringLength)\n                        )\n    \n                        let searchArrayOriginal = searchArray;\n                        if (searchArray.length > thisRef.state.rowsPerPage)\n                            searchArray = searchArray.slice(0, thisRef.state.rowsPerPage);\n    \n                        thisRef.setState({ displayBank: searchArray, searchEnable: true, searchArray: searchArrayOriginal, pageNum: 1,searchString:searchString })\n                        \n    \n                    }, 1000);\n                });\n                \n\n        }\n        \n\n    }\n    changeSearch = (event) => {\n        let searchString = event.target.value;\n\n        searchString = searchString.toString();\n\n        let searchStringLength = searchString.length;\n\n        \n        if (searchStringLength === 0) {\n            clearTimeout(this.timeout);\n            this.setState({ searchArray: [], searchEnable: false, pageNum: 1 ,searchString:searchString})\n\n        }\n        else {\n            this.searchBankOnQuery(searchString,searchStringLength) ;\n        }\n        \n\n    }\n    changeFilter = (event) => {\n        let filter = event.target.value;\n        document.getElementById('searchBank').value = \"\";\n    \n        this.setState({ filter: filter,pageNum:1,searchEnable:false});\n    }\n    favourite = (event) => {\n        if(event.target.value === \"favourite\")\n        {\n            \n            \n        }else if(event.target.value === \"All\")\n        {\n            \n        }\n    }\n\n    render() {\n\n        return (\n            <div>\n                <div >\n                    <input type=\"text\" id=\"searchBank\" onChange={(event) => this.changeSearch(event)} placeholder=\"Search..\" />\n                    <label className={cx(\"ml-2\")}>Choose a filter:</label>\n\n                    <select onChange={(event) => this.changeFilter(event)} id=\"Filter\">\n                        <option value=\"ifsc\">IFSC</option>\n                        <option value=\"bank_id\">Bank ID</option>\n                        <option value=\"address\">Address</option>\n                        <option value=\"bank_name\">Bank Name</option>\n                        <option value=\"branch\">Branch</option>\n                        <option value=\"favourite\">favourite</option>\n                    </select>\n                    \n\n                </div>\n                <div className={cx(\"pt-4 \", styles.main)}>\n\n                    <div className={cx(\"mt-5\", styles.scroll)}>\n                        {this.state.displayBank.length > 0 ? this.state.displayBank.map((resource, index) => {\n                            let url = \"/bank/\"+index+\"/\" + resource.ifsc;\n                            return (\n                                <NavLink to={url}>\n                                    <div className={cx(\"pl-3\", styles.clientCardAlign)} key={index}>\n                                        <div className={styles.ResourceCard}>\n                                            <div style={{}}>\n                                                <div className={styles.cardTextMedium}>Bank Name : {resource.bank_name}</div>\n                                                <div className={styles.cardTextMedium}>IFSC : {resource.ifsc}</div>\n                                                <div className={styles.cardTextMedium}>Branch : {resource.branch}</div>\n                                                <div className={styles.cardTextMedium}>Bank ID : {resource.bank_id}</div>\n                                                <div className={styles.cardTextMedium}>Address : {resource.address}</div>\n                                            </div>\n                                        </div>\n\n                                    </div>\n                                </NavLink>\n                            )\n                        }) : null}\n                    </div>\n                </div>\n\n\n                <span >\n                    <button\n                        className={cx({ [styles.ArrowDisable]: this.handlePrevDisableCheck(\"left\") }, styles.Arrow)}\n                        disabled={this.handlePrevDisableCheck(\"left\")}\n                        onClick={() => this.pageChange(\"left\")}\n                    >\n                        <img src={leftArrow} alt=\"arrow\" />\n                    </button>\n                </span>\n                <span >\n                    <button\n                        className={cx({ [styles.ArrowDisable]: this.handlePrevDisableCheck(\"right\") }, styles.Arrow)}\n                        disabled={this.handlePrevDisableCheck(\"right\")}\n                        onClick={() => this.pageChange(\"right\")}\n                    >\n                        <img src={rightArrow} alt=\"arrow\" />\n                    </button>\n                </span>\n\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        bankData: state.BankData\n    };\n};\n\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getBankData: () => dispatch(actions.getBankData()),\n        getBanKdataFromCache: () => dispatch(actions.getBanKdataFromCache())\n    };\n};\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(BankHome));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport * as actions from './Store/action';\nimport styles from \"./BankHome.module.scss\";\nclass BankHome extends Component {\n\n\n    state = {\n        ifscParams: null,\n        index : null\n    }\n\n\n    componentDidMount() {\n        // Get data\n        this.props.getBanKdataFromCache();\n        const { match } = this.props;\n        let ifscParams = match.params.bankID;\n        let index = match.params.index ;\n        this.setState({ ifscParams: ifscParams,index:index })\n    }\n\n    checkContains = (obj) => {\n        if (_.isEqual(obj.ifsc, this.state.ifscParams))\n        {\n            return true;\n        }\n        return false;\n    }\n    \n\n    favourite = (event) => {\n\n        let data = JSON.parse(localStorage.getItem('cacheBankData'));\n\n        \n        let currData = data[this.state.index ] ;\n        \n        if('favourite' in currData)\n        {\n            let fav = currData['favourite'] ;\n            fav = !fav ;\n            currData['favourite'] = fav ;\n\n        }\n        else{\n            currData['favourite'] = true ; \n        }\n        \n        data[this.state.index] = currData ;\n\n        localStorage.setItem(\"cacheBankData\", JSON.stringify(data));\n\n        data = JSON.parse(localStorage.getItem('cacheBankData'));\n        \n    }\n    render() {\n        let displayBank = null ;\n        if (this.state.ifscParams !== null) {\n            displayBank = this.props.bankData.filter(obj =>\n                this.checkContains(obj)\n            )\n            \n        }\n\n        return (\n            <div>\n                {displayBank ? <div>\n                    <div className={styles.cardTextMedium}>Bank Name : {displayBank[0].bank_name}</div>\n                    <div className={styles.cardTextMedium}>IFSC : {displayBank[0].ifsc}</div>\n                    <div className={styles.cardTextMedium}>Branch : {displayBank[0].branch}</div>\n                    <div className={styles.cardTextMedium}>Bank ID : {displayBank[0].bank_id}</div>\n                    <div className={styles.cardTextMedium}>Address : {displayBank[0].address}</div>\n                    <input onChange={(event)=>this.favourite(event)} type=\"checkbox\" id=\"favourite\" name=\"favourite\" value=\"favourite\"/>\n                    <label for=\"favourite\"> favourite</label>\n                </div> : null}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        bankData: state.BankData\n    };\n};\n\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getBankData: () => dispatch(actions.getBankData()),\n        getBanKdataFromCache: () => dispatch(actions.getBanKdataFromCache())\n    };\n};\n\nexport default (connect(mapStateToProps, mapDispatchToProps)(BankHome));","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport BankDetails from './BankDetails/BankHome'\r\nimport innerBankDetails from './BankDetails/innerBankDetails'\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n\r\n\r\n\r\n        <BrowserRouter>\r\n          <Switch>\r\n            <Route path={`/`} exact component={BankDetails} />\r\n            <Route path={`/bank/:index/:bankID`} exact component={innerBankDetails} />\r\n\r\n          </Switch>\r\n        </BrowserRouter>\r\n\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as actionTypes from './actionTypes';\n\nconst initialState = {\n    getDataState: 'INIT',\n    BankData: {},\n    error: null,\n    cacheState: 'INIT'\n}\n\nconst initState = () => {\n    return initialState;\n}\n\n\nconst resetError = (state, action) => {\n    return {...state, \n        error: null\n    };\n}\n\n//GET DATA REDUCERS\nconst getDataLoading = (state) => {\n    console.log(\"Loading\");\n    return {...state, \n        getDataState: 'LOADING'\n    } ;\n}\n\nconst getDataSuccess = (state, action) => {\n    console.log(\"SUCCES\",action.BankData);\n    \n    return {...state,\n        getDataState: 'SUCCESS',\n        BankData: action.BankData,\n        error: null\n    }\n};\n\nconst getDataError = (state, action) => {\n    console.log(\"Loading\");\n    return {...state,\n        getDataState: 'ERROR',\n        error: action.error,\n    };\n};\n\nconst getCacheData = (state,action) => {\n    return {...state,\n        cacheState:'SUCCESS',\n        BankData: action.BankData\n    }\n}\n\n\n\nconst reducer = (state = initialState, action) => {\n   \n    switch (action.type) {\n\n        case actionTypes.INIT_STATE: return initState();\n        case actionTypes.RESET_ERROR: return resetError(state, action);\n\n        case actionTypes.GET_BANK_DETAILS_LOADING: return getDataLoading(state, action);\n        case actionTypes.GET_BANK_DETAILS_SUCCESS: return getDataSuccess(state, action);\n        case actionTypes.GET_BANK_DETAILS_ERROR: return getDataError(state, action);\n\n        case actionTypes.CACHE_SUCCESS: return getCacheData(state,action) ;\n        default: return state;\n    }\n};\n\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {createStore,applyMiddleware} from 'redux' ;\r\nimport reducer from './BankDetails/Store/reducer' ;\r\nimport thunk from 'redux-thunk'\r\n\r\nconst store = createStore(reducer,applyMiddleware(thunk)) ;\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}